"Lisscad’s bundled macros."

;; This file compiles to prelude.py because Lissp v0.4.0 cannot import .lissp.

;; Define define for use in this module.
(hissp.macros.._macro_.prelude)

(defmacro standard ()
  "Provide an OpenSCAD-like API with added consistency, safety and convenience."
  ;; This is in part a macro of macros, built to be evaluated in the context of
  ;; a CAD script in such a way that it mutates the namespace of that script,
  ;; not of this module. As of 2022-09-17, the “defmacro” macro defined by
  ;; hissp.macros.._macro_.prelude is not safe for this purpose, but it’s also
  ;; not needed here.
  `(progn
     (prelude)

     ;; Imports:
     (exec "from lisscad.vocab.base import *" (globals))
     (exec "from lisscad.app import write" (globals))
     (exec "from lisscad.data.other import Asset" (globals))

     ;; Constants:
     (define π math..pi)

     ;; OpenSCAD’s single-character modifiers, {% # 1 *}:
     (exec "del _macro_.QzPCENT_" (globals))  ; Drop the Hissp prelude’s %.
     (define % lisscad.op..background_dict)  ; Replace the Hissp prelude’s %.
     (exec "del _macro_.QzHASH_" (globals))  ; Drop the Hissp prelude’s #.
     (define \# lisscad.op..debug_set)  ; Replace the Hissp prelude’s #.
     ;; In Lissp, ! is a builtin reader macro; it cannot be dropped.
     ;; The use of ! as in OpenSCAD therefore requires an escape.
     (define \! lisscad.vocab.base..root)
     ;; * inspects its arguments to do either multiplication or disable.
     (define * lisscad.op..mul)

     ;; Further single-character operators for OpenSCAD and maths:
     (define | lisscad.vocab.base..union)
     (define & lisscad.vocab.base..intersection)
     (define + lisscad.op..add)
     (define - lisscad.op..sub)
     (define / lisscad.op..div)

     ;; Other helpers.
     (define first get#0)
     (define second get#1)
     (define third get#2)))

(defmacro lisp ()
  "Provide unambiguous aliases in kebab case, traditionally idiomatic for Lisp.
  This is a superset of the standard prelude."
  `(progn
     (standard)
     (define call-module (partial lisscad.vocab.base..module : call True))
     (define linear-extrude (partial lisscad.vocab.base..extrude : rotate False))
     (define rotate-extrude (partial lisscad.vocab.base..extrude : rotate True))))
